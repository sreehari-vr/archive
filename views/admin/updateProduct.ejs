<%- include("../../views/partials/admin/header") %>

<div class="container py-5">
  <div class="row justify-content-center">
    <div class="col-lg-10 col-xl-8 pt-5">
      <div class="card border-0 shadow-lg">
        <div class="card-header bg-gradient-primary text-white py-3">
          <h2 class="text-center mb-0">Update Product</h2>
        </div>
        <div class="card-body p-4">
          <form onsubmit="editProduct(event)" enctype="multipart/form-data" class="needs-validation" novalidate>
            <input type="hidden" id="Updateid" value="<%= data._id %>">
            
            <div class="row g-3">
              <div class="col-12">
                <label for="product_name" class="form-label">Product Name</label>
                <div class="input-group has-validation">
                  <span class="input-group-text"><i class="bi bi-tag"></i></span>
                  <input 
                    type="text" 
                    class="form-control" 
                    id="product_name" 
                    name="productName" 
                    value="<%= data.productName %>"
                    required 
                  />
                  <div class="invalid-feedback" id="productName-error">Product name is required</div>
                </div>
              </div>

              <div class="col-12">
                <label for="descriptionid" class="form-label">Full Description</label>
                <div class="input-group has-validation">
                  <span class="input-group-text"><i class="bi bi-text-paragraph"></i></span>
                  <textarea 
                    class="form-control" 
                    id="descriptionid" 
                    name="description" 
                    rows="4" 
                    required
                  ><%= data.description %></textarea>
                  <div class="invalid-feedback" id="description-error">Description is required</div>
                </div>
              </div>

              <div class="col-md-4">
                <label for="regularPrice" class="form-label">Regular Price</label>
                <div class="input-group has-validation">
                  <span class="input-group-text">â‚¹</span>
                  <input 
                    type="number" 
                    class="form-control" 
                    id="regularPrice" 
                    name="regularPrice" 
                    value="<%= data.regularPrice %>"
                    required 
                  />
                  <div class="invalid-feedback" id="regularPrice-error">Enter a valid price</div>
                </div>
              </div>

              <div class="col-md-4">
                <label for="quantity" class="form-label">Quantity</label>
                <div class="input-group has-validation">
                  <span class="input-group-text"><i class="bi bi-box"></i></span>
                  <input 
                    type="number" 
                    class="form-control" 
                    id="quantity" 
                    name="quantity" 
                    value="<%= data.quantity %>"
                    required 
                  />
                  <div class="invalid-feedback" id="quantity-error">Enter a valid quantity</div>
                </div>
              </div>

              <div class="col-md-4">
                <label for="offer" class="form-label">Offer (%)</label>
                <div class="input-group has-validation">
                  <span class="input-group-text">%</span>
                  <input 
                    type="number" 
                    class="form-control" 
                    id="offer" 
                    name="offer" 
                    value="<%= data.offer %>"
                    min="0" 
                    max="100" 
                    required
                  />
                  <div class="invalid-feedback" id="offer-error">Enter a valid offer percentage</div>
                </div>
              </div>

              <div class="col-12">
                <label for="category" class="form-label">Category</label>
                <div class="input-group has-validation">
                  <span class="input-group-text"><i class="bi bi-list"></i></span>
                  <select class="form-select" id="category" name="category" required>
                    <% categories.forEach(category => { %>
                        <option value="<%= category._id %>" 
                                <% 
                                // Check multiple ways of comparing
                                if (
                                    (data.category && data.category._id && category._id.equals(data.category._id)) || 
                                    (data.category && category._id.toString() === data.category.toString())
                                ) { %>
                                    selected
                                <% } %>>
                            <%= category.name %>
                        </option>
                    <% }) %>
                </select>
                  <div class="invalid-feedback" id="category-error">Please select a category</div>
                </div>
              </div>

              <% if (data.productImage && data.productImage.length) { %>
                <div class="col-12">
                    <div class="card">
                      <div class="card-header">
                        <h4 class="mb-0">Current Images</h4>
                      </div>
                      <div class="card-body">
                        <div class="row g-2">
                          <% data.productImage.forEach((image, index) => { %>
                            <div class="col-md-3 position-relative">
                              <img src="/<%= image.replace(/\\/g, '/') %>" alt="Product Image" class="img-fluid rounded" />
                              <button type="button" class="btn btn-danger btn-sm position-absolute top-0 end-0" onclick="deleteImage('<%= image %>', '<%= index %>')">
                                <i class="bi bi-trash"></i>
                              </button>
                            </div>
                          <% }); %>
                        </div>
                      </div>
                    </div>
                  </div>
              <% } %>

              <div class="col-12">
                <div class="card">
                  <div class="card-header">
                    <h4 class="mb-0">Update Images</h4>
                  </div>
                  <div class="card-body">
                    <div class="row g-3">
                      <% for(let i = 1; i <= 4; i++) { %>
                        <div class="col-md-3">
                          <input 
                            class="form-control mb-2" 
                            type="file" 
                            id="input<%= i %>" 
                            name="images" 
                            accept="image/png, image/jpeg, image/jpg" 
                          />
                          <img src="" id="imgView<%= i %>" class="img-fluid mb-2" style="display: none;">
                          <div id="cropContainer<%= i %>" class="image-cropper position-relative" style="display: none;">
                            <img 
                              src="" 
                              id="croppedImg<%= i %>" 
                              alt="Image Preview" 
                              class="img-fluid mb-2" 
                              style="display: none;" 
                            />
                            <div class="crop-actions mt-2">
                              <button 
                                type="button" 
                                onclick="cropImage('<%= i %>')" 
                                class="btn btn-sm btn-primary me-2"
                              >
                                Crop
                              </button>
                            </div>
                          </div>
                        </div>
                      <% } %>
                    </div>
                  </div>
                </div>
              </div>

              <div class="col-12">
                <button type="submit" class="btn btn-primary w-100 py-2">
                  Update Product
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css" />
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<script>
  let croppers = {};
  let croppedFiles = {};
  let imagesToDelete = []; // Global variable to track images for deletion
  
  // Initialize croppers for each image input
  [1, 2, 3, 4].forEach(index => {
    const inputElement = document.getElementById(`input${index}`);
    const imgViewElement = document.getElementById(`imgView${index}`);
    const cropContainer = document.getElementById(`cropContainer${index}`);
    const croppedImgElement = document.getElementById(`croppedImg${index}`);
  
    inputElement.addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(event) {
          // Destroy existing cropper if it exists
          if (croppers[index]) {
            croppers[index].destroy();
          }
  
          // Show and set image sources
          imgViewElement.src = event.target.result;
          imgViewElement.style.display = 'block';
          croppedImgElement.src = event.target.result;
          croppedImgElement.style.display = 'block';
          cropContainer.style.display = 'block';
  
          // Initialize new cropper
          croppers[index] = new Cropper(croppedImgElement, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 1,
          });
        };
        reader.readAsDataURL(file);
      }
    });
  });
  
  // Function to handle image deletion
  function deleteImage(imagePath, index) {
    // Remove the image element from the DOM
    const imageContainer = event.target.closest('.col-md-3');
    if (imageContainer) {
      imageContainer.remove();
    }
  
    // Add the image path to the list of images to be deleted
    imagesToDelete.push(imagePath);
  
    // Optional: Log for debugging
    console.log('Images to delete:', imagesToDelete);
  }
  
  // Crop image function
  function cropImage(index) {
    const cropper = croppers[index];
    const croppedImgElement = document.getElementById(`croppedImg${index}`);
    const imgViewElement = document.getElementById(`imgView${index}`);
  
    if (cropper) {
      cropper.getCroppedCanvas().toBlob((blob) => {
        const file = new File([blob], `croppedImage${index}.png`, {
          type: "image/png",
        });
        
        imgViewElement.src = URL.createObjectURL(blob);
        croppedImgElement.src = URL.createObjectURL(blob);
        croppedFiles[index] = file;
  
        cropper.destroy();
        delete croppers[index];
      }, "image/png");
    }
  }
  
  // Form validation function
  function validateForm() {
    const form = document.querySelector('form');
    let isValid = form.checkValidity();
    form.classList.add('was-validated');
    
    // Get form values
    const productName = document.getElementById('product_name').value.trim();
    const description = document.getElementById('descriptionid').value.trim();
    const regularPrice = parseFloat(document.getElementById('regularPrice').value);
    const quantity = parseInt(document.getElementById('quantity').value);
    const offer = parseFloat(document.getElementById('offer').value);
    
    // Reset custom error messages
    document.getElementById('productName-error').textContent = "Product name is required";
    document.getElementById('description-error').textContent = "Description is required";
    document.getElementById('regularPrice-error').textContent = "Enter a valid price";
    document.getElementById('quantity-error').textContent = "Enter a valid quantity";
    document.getElementById('offer-error').textContent = "Enter a valid offer percentage";

    // Inside validateForm function, update the product name validation:
if (!productName || productName.trim().length === 0) {
  document.getElementById('productName-error').textContent = "Product name cannot be empty or contain only spaces";
  document.getElementById('product_name').setCustomValidity("Product name cannot be empty or contain only spaces");
  isValid = false;
} else if (!/^[a-zA-Z][a-zA-Z0-9\s]*$/.test(productName)) {
  document.getElementById('productName-error').textContent = "Product name must start with a letter and can only contain letters, numbers and spaces";
  document.getElementById('product_name').setCustomValidity("Product name must start with a letter and can only contain letters, numbers and spaces");
  isValid = false;
} else {
  document.getElementById('product_name').setCustomValidity("");
}
    
    // Validate description first character
    if (!/^[a-zA-Z]/.test(description)) {
      document.getElementById('description-error').textContent = "Description must start with a letter";
      document.getElementById('descriptionid').setCustomValidity("Description must start with a letter");
      isValid = false;
    } else {
      document.getElementById('descriptionid').setCustomValidity("");
    }
    
    // Validate regular price
    if (regularPrice < 0) {
      document.getElementById('regularPrice-error').textContent = "Price cannot be negative";
      document.getElementById('regularPrice').setCustomValidity("Price cannot be negative");
      isValid = false;
    } else {
      document.getElementById('regularPrice').setCustomValidity("");
    }
    
    // Validate quantity
    if (quantity < 0) {
      document.getElementById('quantity-error').textContent = "Quantity cannot be negative";
      document.getElementById('quantity').setCustomValidity("Quantity cannot be negative");
      isValid = false;
    } else {
      document.getElementById('quantity').setCustomValidity("");
    }
    
    // Validate offer
    if (offer < 0 || offer > 100) {
      document.getElementById('offer-error').textContent = "Offer must be between 0 and 100";
      document.getElementById('offer').setCustomValidity("Offer must be between 0 and 100");
      isValid = false;
    } else {
      document.getElementById('offer').setCustomValidity("");
    }
    
    return isValid;
  }
  
  // Product edit function
  function editProduct(event) {
    event.preventDefault();
    
    // Validate form
    if (!validateForm()) {
      return;
    }
  
    // Create FormData
    const formData = new FormData();
    const productId = document.getElementById('Updateid').value;
    
    // Append form fields
    formData.append('id', productId);
    formData.append('productName', document.getElementById('product_name').value);
    formData.append('description', document.getElementById('descriptionid').value);
    formData.append('regularPrice', document.getElementById('regularPrice').value);
    formData.append('quantity', document.getElementById('quantity').value);
    formData.append('category', document.getElementById('category').value);
    formData.append('offer', document.getElementById('offer').value);
  
    // Log FormData contents for debugging
    for (let [key, value] of formData.entries()) {
      console.log(`${key}: ${value}`);
    }
  
    // Append cropped images
    Object.keys(croppedFiles).forEach(index => {
      formData.append('images', croppedFiles[index]);
      console.log(`Appended cropped image ${index}`);
    });
  
    // Append images to delete
    imagesToDelete.forEach(image => {
      formData.append('imagesToDelete', image);
      console.log(`Marked image for deletion: ${image}`);
    });
  
    // Fetch request to update product
    fetch('/admin/updateProduct', {
      method: 'POST',
      body: formData
    })
    .then(response => {
      console.log('Response status:', response.status);
      return response.json();
    })
    .then(data => {
      console.log('Full response:', data);
      if (data.success) {
        Swal.fire({
          icon: "success",
          title: "Successfully Updated",
          text: "Product Updated",
          timer: 1500
        }).then(() => {
          window.location.href = "/admin/products";
        });
      } else {
        console.error('Update failed:', data.error);
        // Handle specific error cases
        if (data.error === "Product name already exists") {
          document.getElementById('productName-error').textContent = "Product name already exists";
          document.getElementById('product_name').setCustomValidity("Product name already exists");
          document.querySelector('form').classList.add('was-validated');
        } else {
          Swal.fire({
            icon: "error",
            title: "Not Updated",
            text: data.error || "Product not Updated",
          });
        }
      }
    })
    .catch(error => {
      console.error("Full error:", error);
      Swal.fire({
        icon: "error",
        title: "Error occurred",
        text: "Something went wrong",
      });
    });
  }
  
  // Reset form state on page load
  document.addEventListener('DOMContentLoaded', () => {
    // Clear any existing form state
    croppedFiles = {};
    imagesToDelete = [];
    croppers = {};
  });

  document.getElementById('product_name').addEventListener('input', function(e) {
    // Remove spaces from the beginning as they're typed
    if (this.value.startsWith(' ')) {
        this.value = this.value.trimStart();
    }
    
    // Also prevent submitting if only spaces
    if (this.value.trim().length === 0) {
        this.setCustomValidity("Product name cannot be empty or contain only spaces");
    } else {
        this.setCustomValidity("");
    }
});
</script>

<%- include("../../views/partials/admin/footer") %>