<%- include("../../views/partials/user/header") %>
	<style>
		.quantity-control {
			display: inline-flex;
			align-items: center;
			gap: 2px;
		}

		.quantity-control .quantity-btn {
			width: 20px;
			height: 20px;
			padding: 0;
			display: flex;
			align-items: center;
			justify-content: center;
			border: none;
			background: transparent;
			color: #333;
			font-size: 16px;
			transition: opacity 0.2s;
			line-height: 1;
		}

		.quantity-control .quantity-btn:hover {
			opacity: 0.7;
		}

		.quantity-control .input-number {
			width: 32px;
			height: 24px;
			border: none;
			padding: 0;
			margin: 0;
			font-size: 14px;
			background: transparent;
		}

		.quantity-control .input-number:focus {
			outline: none;
			box-shadow: none;
		}

		/* Remove number input arrows */
		.quantity-control .input-number::-webkit-outer-spin-button,
		.quantity-control .input-number::-webkit-inner-spin-button {
			-webkit-appearance: none;
			margin: 0;
		}



		@media (max-width: 576px) {
			.quantity-control {
				gap: 1px;
			}

			.quantity-control .quantity-btn {
				width: 18px;
				height: 18px;
				font-size: 14px;
			}

			.quantity-control .input-number {
				width: 28px;
				font-size: 13px;
			}
		}
	</style>
	<div class="sale">
		<div class="container">
		  <div class="row">
			<div class="col-sm-8 offset-sm-2 text-center">
			  <div class="row">
				<div class="owl-carousel2">
				  <% coupon.forEach(coupon => { %>
					<div class="item">
					  <div class="col">
						<h3>
						  <a href="#">
							<%= coupon.description %> 
							Use Code: <%= coupon.code %>
						  </a>
						</h3>
					  </div>
					</div>
				  <% }); %>
				</div>
			  </div>
			</div>
		  </div>
		</div>
	  </div>
	</nav>




	<div class="colorlib-product">
		<div class="container">
			<div class="row row-pb-lg">
				<div class="col-md-10 offset-md-1">
					<div class="process-wrap">
						<div class="process text-center active">
							<p><span>01</span></p>
							<h3>Shopping Cart</h3>
						</div>
						<div class="process text-center">
							<p><span>02</span></p>
							<h3>Checkout</h3>
						</div>
						<div class="process text-center">
							<p><span>03</span></p>
							<h3>Order Complete</h3>
						</div>
					</div>
				</div>
			</div>
			<div class="row row-pb-lg">
				<div class="col-md-12">
					<div class="product-name d-flex">
						<div class="one-forth text-left px-4">
							<span>Product Details</span>
						</div>
						<div class="one-eight text-center">
							<span>Price</span>
						</div>
						<div class="one-eight text-center">
							<span>Quantity</span>
						</div>
						<div class="one-eight text-center">
							<span>Total</span>
						</div>
						<div class="one-eight text-center px-4">
							<span>Remove</span>
						</div>
					</div>

					<% if(cart && cart.items.length> 0) { %>
						<% cart.items.forEach(item=> { %>
							<div class="product-cart d-flex">
								<div class="one-forth ">
									<div class="product-img mr-3">
										<img src="<%= item.productId.productImage[0].replace(/\\/g, '/') %>"
											alt="<%= item.productId.productName %>" style="height: 6rem;">
									</div>
									<div class="display-tc">
										<h6>
											<%= item.productId.productName %>
										</h6>
									</div>
								</div>
								<div class="one-eight text-center">
									<div class="display-tc">
										<span class="price" data-price="<%= item.productId.salePrice %>">₹<%=
												item.productId.salePrice.toFixed(2) %></span>
									</div>
								</div>
								<div class="one-eight text-center">
									<div class="display-tc d-flex justify-content-center align-items-center">
										<div class="quantity-control">
											<button class="btn btn-sm quantity-btn" data-action="decrease">–</button>
											<input type="number" id="quantity-<%= item.productId._id %>" name="quantity"
												class="form-control input-number text-center"
												value="<%= item.quantity %>" min="1"
												max="<%= item.productId.quantity <= 10 ? item.productId.quantity : 10 %>"
												readonly>
											<button class="btn btn-sm quantity-btn" data-action="increase">+</button>
										</div>
									</div>
								</div>
								<div class="one-eight text-center">
									<div class="display-tc">
										<span class="total-price">₹<%= (item.productId.salePrice *
												item.quantity).toFixed(2) %></span>
									</div>
								</div>
								<div class="one-eight text-center">
									<div class="display-tc">
										<a href="/cart/remove/<%= item.productId._id %>" class="closed"></a>
									</div>
								</div>
							</div>

							<% }) %>

								<div class="row row-pb-lg">
									<div class="col-md-12">
										<div class="total-wrap">
											<div class="row">

												<div class="col-sm-12">
													<form action="/couponApply" method="post">
														<div class="col-sm-12 text-center">
															<div class="total">
																<div class="sub">
																	<p><span>Subtotal</span> <span id="subtotal"
																			name="subtotal">₹<%=
																				cart.subTotal.toFixed(2) %></span>
																	</p>
																	<p><span>Discount</span> <span id="discount"
																			name="discount">₹<%=
																			cart.discount.toFixed(2) %></span></p>
																</div>
																<div class="grand-total">
																	<p><span><strong>Grand total:</strong></span> <span
																			id="grandTotal" name="grandTotal">₹<%=
																				cart.grandTotal.toFixed(2) %></span>
																	</p>
																</div>
																<div id="cart-summary"
																	data-min-purchase="<%= coupon.minPurchase %>"></div>



															</div>
														</div>
														<div class="row form-group d-flex p-3">

															<div class="col-sm-3">
																<input type="text" id="couponCodeInput"
																	class="form-control input-number"
																	placeholder="Your Coupon Number...">
															</div>
															<div class="col-sm-3 d-flex">
																<button id="applyCouponBtn"
																	class="btn btn-primary">Apply Coupon</button>
															</div>
														</div>

													</form>
													<button class="btn btn-link p-0 mb-5 ml-3" id="refresh">Remove
														Coupon</button>
														
                                                      <a href="/coupons">
														<button class="btn btn-link p-0 mb-5 ml-3" id="coupons">Available
															Coupons</button>
													  </a>
														


													<form id="checkoutForm" action="/checkout" method="POST">
														<div class="d-flex">
															<div>
																<a href="/shop"
																	class="btn btn-outline-secondary">Continue
																	Shopping</a>
															</div>
															<div>
																<input type="hidden" name="subtotal" id="subtotalInput">
																<input type="hidden" name="discount" id="discountInput">
																<input type="hidden" name="grandTotal"
																	id="grandTotalInput">
																<input type="hidden" name="quantities"
																	id="quantitiesInput">
																<input type="hidden" name="couponCode"
																	id="couponCodeInputHidden">
																<input type="submit" value="Proceed to Checkout"
																	class="btn btn-primary">
															</div>
														</div>
													</form>

												</div>


											</div>
											<% } else { %>
												<div class="text-center py-5">
													<h3>Your cart is empty</h3>
													<p class="text-muted mt-3">Looks like you haven't added any items to
														your cart yet.</p>
													<a href="/shop" class="btn btn-primary mt-3">Start Shopping</a>
												</div>
												<% } %>
										</div>
									</div>
								</div>


				</div>
			</div>


			<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
			<script>

				document.addEventListener("DOMContentLoaded", function () {
					const quantityInputs = document.querySelectorAll("input[name='quantity']");
					const applyCouponBtn = document.getElementById("applyCouponBtn");
					const couponCodeInput = document.getElementById("couponCodeInput");
					const checkoutForm = document.getElementById("checkoutForm");

					async function updateQuantity(productId, newQuantity) {
						try {
						  const response = await fetch('/cart/update-quantity', {
							method: 'POST',
							headers: {
							  'Content-Type': 'application/json',
							},
							body: JSON.stringify({
							  productId,
							  quantity: newQuantity
							})
						  });
					  
						  const data = await response.json();
						  if (response.ok && data.success) {
							// Update UI with new totals
							document.querySelector("#subtotal").textContent = `₹${data.cart.subTotal.toFixed(2)}`;
							document.querySelector("#discount").textContent = `₹${data.cart.discount.toFixed(2)}`;
							document.querySelector("#grandTotal").textContent = `₹${data.cart.grandTotal.toFixed(2)}`;
							
							// If coupon was removed due to minimum purchase requirement
							if (!data.cart.appliedCouponCode) {
							  document.querySelector("#couponCodeInput").value = "";
							  Swal.fire("Info", "Coupon removed as requirements are no longer met", "info");
							}
						  }
						} catch (error) {
						  console.error('Error updating quantity:', error);
						  Swal.fire("Error!", "Failed to update quantity", "error");
						}
					  }

					async function recalculateTotals(minPurchase = 0) {
						let subTotal = 0;

						document.querySelectorAll(".total-price").forEach((totalElement) => {
							const total = parseFloat(totalElement.textContent.replace("₹", ""));
							subTotal += isNaN(total) ? 0 : total;
						});

						const subTotalElement = document.querySelector("#subtotal");
						const discountElement = document.querySelector("#discount");
						const grandTotalElement = document.querySelector("#grandTotal");

						subTotalElement.textContent = `₹${subTotal.toFixed(2)}`;

						const couponCode = couponCodeInput?.value.trim();
						let discount = 0;

						if (subTotal >= minPurchase && couponCode) {
							try {
								const response = await fetch("/couponApply", {
									method: "POST",
									headers: { "Content-Type": "application/json" },
									body: JSON.stringify({ couponCode, subtotal: subTotal }),
								});

								const data = await response.json();

								if (response.ok && data.success) {
									discount = data.discountAmount;
								} else {
									console.log("Coupon not applicable:", data.message);
								}
							} catch (error) {
								console.error("Error reapplying coupon:", error);
							}
						}

						discountElement.textContent = `₹${discount.toFixed(2)}`;
						const grandTotal = Math.max(0, subTotal - discount);
						grandTotalElement.textContent = `₹${grandTotal.toFixed(2)}`;
					}

					quantityInputs.forEach((input) => {
						input.addEventListener("input", async (event) => {
							const productId = event.target.id.split("-")[1];
							const priceElement = event.target
								.closest(".product-cart")
								.querySelector(".price");
							const productPrice = parseFloat(priceElement.dataset.price);

							const quantity = parseInt(event.target.value) || 0;
							const newProductTotal = (quantity * productPrice).toFixed(2);

							const totalElement = event.target
								.closest(".product-cart")
								.querySelector(".total-price");
							totalElement.textContent = `₹${newProductTotal}`;

							const minPurchase = parseFloat(
								document.querySelector("#cart-summary").dataset.minPurchase
							) || 0;

							await recalculateTotals(minPurchase);
						});
					});

					applyCouponBtn.addEventListener("click", async (event) => {
						event.preventDefault();

						const couponCode = couponCodeInput.value;
						const subtotal = parseFloat(
							document.querySelector("#subtotal").textContent.replace("₹", "")
						);

						try {
							const response = await fetch("/couponApply", {
								method: "POST",
								headers: { "Content-Type": "application/json" },
								body: JSON.stringify({ couponCode, subtotal }),
							});

							const data = await response.json();

							if (response.ok && data.success) {
								document.querySelector("#discount").textContent = `₹${data.discountAmount.toFixed(2)}`;
								document.querySelector("#grandTotal").textContent = `₹${data.newGrandTotal.toFixed(2)}`;

								Swal.fire("Success!", "Coupon applied successfully!", "success");
							} else {
								document.querySelector("#discount").textContent = `₹0.00`;
								document.querySelector("#grandTotal").textContent = `₹${subtotal.toFixed(2)}`;

								Swal.fire("Error!", data.message || "Coupon not applicable.", "error");
							}
						} catch (error) {
							console.error("Error applying coupon:", error);
							Swal.fire("Error!", "An error occurred while applying the coupon.", "error");
						}
					});

					const removeButtons = document.querySelectorAll(".closed");
					removeButtons.forEach((btn) => {
						btn.addEventListener("click", async (event) => {
						  event.preventDefault();
					  
						  const productRow = btn.closest(".product-cart");
						  const productId = productRow.querySelector("input[name='quantity']").id.split("-")[1];
					  
						  try {
							const response = await fetch(`/cart/remove/${productId}`, {
							  method: "GET",
							});
					  
							const data = await response.json();
					  
							if (response.ok && data.success) {
							  // Remove the product row
							  productRow.remove();
					  
							  // Update cart totals
							  document.querySelector("#subtotal").textContent = `₹${data.cart.subTotal.toFixed(2)}`;
							  document.querySelector("#discount").textContent = `₹${data.cart.discount.toFixed(2)}`;
							  document.querySelector("#grandTotal").textContent = `₹${data.cart.grandTotal.toFixed(2)}`;
					  
							  // Handle coupon removal if applicable
							  if (data.couponRemoved) {
								document.querySelector("#couponCodeInput").value = "";
								const hiddenCouponInput = document.querySelector("#couponCodeInputHidden");
								if (hiddenCouponInput) {
								  hiddenCouponInput.value = "";
								}
								
								Swal.fire({
								  title: "Coupon Removed",
								  text: "Coupon removed as minimum purchase requirement is no longer met",
								  icon: "info",
								  toast: true,
								  position: 'top-end',
								  showConfirmButton: false,
								  timer: 3000
								});
							  } else {
								Swal.fire("Success!", "Product removed successfully!", "success");
							  }
					  
							  // If cart is empty, refresh the page to show empty cart message
							  if (data.cart.items === 0) {
								location.reload();
							  }
							} else {
							  Swal.fire("Error!", data.message || "Failed to remove product.", "error");
							}
						  } catch (error) {
							console.error("Error removing product:", error);
							Swal.fire("Error!", "An error occurred while removing the product.", "error");
						  }
						});
					  });

					checkoutForm.addEventListener("submit", () => {
						const subtotal = parseFloat(document.querySelector("#subtotal").textContent.replace("₹", ""));
						const discount = parseFloat(document.querySelector("#discount").textContent.replace("₹", ""));
						const grandTotal = parseFloat(document.querySelector("#grandTotal").textContent.replace("₹", ""));

						const quantities = Array.from(document.querySelectorAll("input[name='quantity']"))
							.map(input => ({ productId: input.id.split("-")[1], quantity: parseInt(input.value, 10) || 0 }));

						document.getElementById("subtotalInput").value = subtotal;
						document.getElementById("discountInput").value = discount;
						document.getElementById("grandTotalInput").value = grandTotal;
						document.getElementById("quantitiesInput").value = JSON.stringify(quantities);

						const couponCode = couponCodeInput?.value.trim() || "";
						document.getElementById("couponCodeInputHidden").value = couponCode;
					});
				});

			</script>

			<script>
// Frontend JavaScript - Replace the existing quantity control event listeners
document.addEventListener("DOMContentLoaded", function () {
	const quantityButtons = document.querySelectorAll(".quantity-btn");
  
	quantityButtons.forEach(button => {
	  button.addEventListener("click", async function () {
		const action = this.dataset.action;
		const inputContainer = this.closest('.display-tc');
		const input = inputContainer.querySelector('input[name="quantity"]');
		const productId = input.id.split("-")[1];
		const currentValue = parseInt(input.value, 10);
		const maxStock = parseInt(input.getAttribute("max"), 10) || 10;
		const minStock = 1;
  
		let newValue = currentValue;
  
		if (action === "increase" && currentValue < maxStock) {
		  newValue = currentValue + 1;
		} else if (action === "decrease" && currentValue > minStock) {
		  newValue = currentValue - 1;
		}
  
		if (newValue !== currentValue) {
		  // Update input value
		  input.value = newValue;
  
		  try {
			const response = await fetch('/cart/update-quantity', {
			  method: 'POST',
			  headers: {
				'Content-Type': 'application/json',
			  },
			  body: JSON.stringify({
				productId,
				quantity: newValue
			  })
			});
  
			const data = await response.json();
			
			if (response.ok && data.success) {
			  // Update product total price
			  const priceElement = inputContainer.closest('.product-cart').querySelector('.price');
			  const productPrice = parseFloat(priceElement.dataset.price);
			  const totalElement = inputContainer.closest('.product-cart').querySelector('.total-price');
			  totalElement.textContent = `₹${(newValue * productPrice).toFixed(2)}`;
  
			  // Update cart totals
			  document.querySelector("#subtotal").textContent = `₹${data.cart.subTotal.toFixed(2)}`;
			  document.querySelector("#discount").textContent = `₹${data.cart.discount.toFixed(2)}`;
			  document.querySelector("#grandTotal").textContent = `₹${data.cart.grandTotal.toFixed(2)}`;
  
			  // Handle coupon removal
			  if (data.couponRemoved) {
				const couponInput = document.querySelector("#couponCodeInput");
				if (couponInput) {
				  couponInput.value = "";
				}
				
				// Clear hidden coupon input if it exists
				const hiddenCouponInput = document.querySelector("#couponCodeInputHidden");
				if (hiddenCouponInput) {
				  hiddenCouponInput.value = "";
				}
  
				// Show notification about coupon removal
				Swal.fire({
				  title: "Coupon Removed",
				  text: data.message,
				  icon: "info",
				  toast: true,
				  position: 'top-end',
				  showConfirmButton: false,
				  timer: 3000
				});
			  }
			} else {
			  // Revert input value if update failed
			  input.value = currentValue;
			  Swal.fire("Error", "Failed to update quantity", "error");
			}
		  } catch (error) {
			console.error('Error updating quantity:', error);
			input.value = currentValue;
			Swal.fire("Error", "Failed to update quantity", "error");
		  }
		}
  
		// Show min/max warnings
		if (newValue === maxStock && action === "increase") {
		  Swal.fire("Warning!", "Quantity exceeds available stock.", "warning");
		} 
	  });
	});
  });
			</script>

			<script>
				// Add this to your existing JavaScript
document.getElementById("refresh").addEventListener("click", async function (event) {
	event.preventDefault();
	
	try {
	  const response = await fetch("/cart/remove-coupon", {
		method: "POST",
		headers: {
		  "Content-Type": "application/json"
		}
	  });
	  
	  const data = await response.json();
	  
	  if (response.ok && data.success) {
		// Clear coupon input
		const couponCodeInput = document.getElementById("couponCodeInput");
		couponCodeInput.value = "";
		
		// Update display values
		document.querySelector("#discount").textContent = "₹0.00";
		document.querySelector("#grandTotal").textContent = 
		  `₹${data.newGrandTotal.toFixed(2)}`;
		
		// Clear hidden input if it exists
		const couponCodeInputHidden = document.getElementById("couponCodeInputHidden");
		if (couponCodeInputHidden) couponCodeInputHidden.value = "";
		
		Swal.fire("Success!", "Coupon removed successfully!", "success");
	  } else {
		Swal.fire("Error!", data.message || "Failed to remove coupon.", "error");
	  }
	} catch (error) {
	  console.error("Error removing coupon:", error);
	  Swal.fire("Error!", "Failed to remove coupon.", "error");
	}
  });
			</script>

			



			<%- include("../../views/partials/user/footer") %>